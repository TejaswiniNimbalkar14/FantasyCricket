"""
    Author : Tejaswini Ramesh Nimbalkar.
"""
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FantasyCricket.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

##Please read comments if project doesn't work

from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import QMessageBox

# Connection to database
# If project does not connect with database, provide full path to databse
# e.g. - 'C:\\Python36\\fantcktdb.db'
import sqlite3
db=sqlite3.connect('fantcktdb.db')
cur=db.cursor()

class Ui_MainWindow(object):
    # Do not edit this function as it is system generated
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 780)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.splitter = QtWidgets.QSplitter(self.frame)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.horizontalGroupBox = QtWidgets.QGroupBox(self.splitter)
        self.horizontalGroupBox.setObjectName("horizontalGroupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalGroupBox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.PtAvLabel = QtWidgets.QLabel(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PtAvLabel.setFont(font)
        self.PtAvLabel.setObjectName("PtAvLabel")
        self.horizontalLayout_4.addWidget(self.PtAvLabel)
        self.PtAvNo = QtWidgets.QLabel(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.PtAvNo.setFont(font)
        self.PtAvNo.setObjectName("PtAvNo")
        self.horizontalLayout_4.addWidget(self.PtAvNo)
        spacerItem = QtWidgets.QSpacerItem(180, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.batRadio = QtWidgets.QRadioButton(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.batRadio.setFont(font)
        self.batRadio.setObjectName("batRadio")
        self.horizontalLayout_5.addWidget(self.batRadio)
        self.batRadio.setEnabled(False)
        self.bowRadio = QtWidgets.QRadioButton(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.bowRadio.setFont(font)
        self.bowRadio.setObjectName("bowRadio")
        self.horizontalLayout_5.addWidget(self.bowRadio)
        self.bowRadio.setEnabled(False)
        self.arRadio = QtWidgets.QRadioButton(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.arRadio.setFont(font)
        self.arRadio.setObjectName("arRadio")
        self.horizontalLayout_5.addWidget(self.arRadio)
        self.arRadio.setEnabled(False)
        self.wkRadio = QtWidgets.QRadioButton(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.wkRadio.setFont(font)
        self.wkRadio.setObjectName("wkRadio")
        self.horizontalLayout_5.addWidget(self.wkRadio)
        self.wkRadio.setEnabled(False)
        self.radio_grp=QtWidgets.QButtonGroup()
        self.radio_grp.addButton(self.batRadio,1)
        self.radio_grp.addButton(self.bowRadio,2)
        self.radio_grp.addButton(self.arRadio,3)
        self.radio_grp.addButton(self.wkRadio,4)
        self.radio_grp.buttonToggled.connect(self.showList1)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.listWidget = QtWidgets.QListWidget(self.horizontalGroupBox)
        self.listWidget.setObjectName("listWidget")
        self.listWidget.itemDoubleClicked.connect(self.removelist1)
        self.msg = QtWidgets.QMessageBox(self.centralwidget)
        self.msg.setWindowTitle("Warning")
        self.verticalLayout.addWidget(self.listWidget)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.label_5 = QtWidgets.QLabel(self.horizontalGroupBox)
        self.label_5.setMaximumSize(QtCore.QSize(20, 16777215))
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.PtUsLabel = QtWidgets.QLabel(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PtUsLabel.setFont(font)
        self.PtUsLabel.setObjectName("PtUsLabel")
        self.horizontalLayout_7.addWidget(self.PtUsLabel)
        self.PtUsNo = QtWidgets.QLabel(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.PtUsNo.setFont(font)
        self.PtUsNo.setObjectName("PtUsNo")
        self.horizontalLayout_7.addWidget(self.PtUsNo)
        spacerItem1 = QtWidgets.QSpacerItem(180, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.TeamLabel = QtWidgets.QLabel(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.TeamLabel.setFont(font)
        self.TeamLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.TeamLabel.setObjectName("TeamLabel")
        self.horizontalLayout_3.addWidget(self.TeamLabel)
        self.TeamName = QtWidgets.QLabel(self.horizontalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.TeamName.setFont(font)
        self.TeamName.setObjectName("TeamName")
        self.horizontalLayout_3.addWidget(self.TeamName)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.listWidget_2 = QtWidgets.QListWidget(self.horizontalGroupBox)
        self.listWidget_2.setObjectName("listWidget_2")
        self.listWidget_2.itemDoubleClicked.connect(self.removelist2)
        self.verticalLayout_2.addWidget(self.listWidget_2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.gridLayout_2.addWidget(self.splitter, 1, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.bMenLabel = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.bMenLabel.setFont(font)
        self.bMenLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.bMenLabel.setObjectName("bMenLabel")
        self.horizontalLayout.addWidget(self.bMenLabel)
        self.BMenNo = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.BMenNo.setFont(font)
        self.BMenNo.setAutoFillBackground(False)
        self.BMenNo.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.BMenNo.setObjectName("BMenNo")
        self.horizontalLayout.addWidget(self.BMenNo)
        self.bowLabel = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bowLabel.setFont(font)
        self.bowLabel.setObjectName("bowLabel")
        self.horizontalLayout.addWidget(self.bowLabel)
        self.bowNo = QtWidgets.QLabel(self.groupBox)
        self.bowNo.setObjectName("bowNo")
        self.horizontalLayout.addWidget(self.bowNo)
        self.ARLabel = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ARLabel.setFont(font)
        self.ARLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ARLabel.setObjectName("ARLabel")
        self.horizontalLayout.addWidget(self.ARLabel)
        self.ARNo = QtWidgets.QLabel(self.groupBox)
        self.ARNo.setObjectName("ARNo")
        self.horizontalLayout.addWidget(self.ARNo)
        self.WKLabel = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.WKLabel.setFont(font)
        self.WKLabel.setObjectName("WKLabel")
        self.horizontalLayout.addWidget(self.WKLabel)
        self.WKNo = QtWidgets.QLabel(self.groupBox)
        self.WKNo.setObjectName("WKNo")
        self.horizontalLayout.addWidget(self.WKNo)
        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 1)
        self.gridLayout_2.setRowStretch(0, 1)
        self.gridLayout_2.setRowStretch(1, 6)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 26))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW = QtWidgets.QAction(MainWindow)
        self.actionNEW.setShortcutContext(QtCore.Qt.WindowShortcut)
        self.actionNEW.setObjectName("actionNEW")
        self.actionNEW.triggered.connect(self.onActionNew)
        self.actionOPEN = QtWidgets.QAction(MainWindow)
        self.actionOPEN.setObjectName("actionOPEN")
        self.actionOPEN.triggered.connect(self.onActionOpen)
        self.actionSAVE = QtWidgets.QAction(MainWindow)
        self.actionSAVE.setObjectName("actionSAVE")
        self.actionSAVE.triggered.connect(self.onActionSave)
        self.actionEVALUATE = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE.setObjectName("actionEVALUATE")
        self.actionEVALUATE.triggered.connect(self.onActionEvaluate)
        self.menuManage_Teams.addAction(self.actionNEW)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionOPEN)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionSAVE)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionEVALUATE)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        # These variables are used to display points on application
        self.avail=1000
        self.used=0
        self.bat=0
        self.bow=0
        self.ar=0
        self.wk=0
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # System generated function    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.PtAvLabel.setText(_translate("MainWindow", "Points Available"))
        self.PtAvNo.setText(_translate("MainWindow", "####"))
        self.batRadio.setText(_translate("MainWindow", "BAT"))
        self.bowRadio.setText(_translate("MainWindow", "BOW"))
        self.arRadio.setText(_translate("MainWindow", "AR"))
        self.wkRadio.setText(_translate("MainWindow", "WK"))
        self.label_5.setText(_translate("MainWindow", ">"))
        self.PtUsLabel.setText(_translate("MainWindow", "Points Used "))
        self.PtUsNo.setText(_translate("MainWindow", "####"))
        self.TeamLabel.setText(_translate("MainWindow", "Team Name"))
        self.TeamName.setText(_translate("MainWindow", "Displayed Here"))
        self.groupBox.setTitle(_translate("MainWindow", "Your Selections:"))
        self.bMenLabel.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.BMenNo.setText(_translate("MainWindow", "##"))
        self.bowLabel.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.bowNo.setText(_translate("MainWindow", "##"))
        self.ARLabel.setText(_translate("MainWindow", "All-rounders(AR)"))
        self.ARNo.setText(_translate("MainWindow", "##"))
        self.WKLabel.setText(_translate("MainWindow", "Wicket-Keeper(WK)"))
        self.WKNo.setText(_translate("MainWindow", "##"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNEW.setText(_translate("MainWindow", "NEW Team"))
        self.actionNEW.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionOPEN.setText(_translate("MainWindow", "OPEN Team"))
        self.actionOPEN.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSAVE.setText(_translate("MainWindow", "SAVE Team"))
        self.actionSAVE.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionEVALUATE.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionEVALUATE.setShortcut(_translate("MainWindow", "Ctrl+E"))

    # function to run when NEW Team action is triggered
    def onActionNew(self):
        self.avail=1000
        self.used=0
        self.bat=0
        self.bow=0
        self.ar=0
        self.wk=0
        self.listWidget.clear()
        self.listWidget_2.clear()
        self.noOnApp()
        tname, ok = QtWidgets.QInputDialog.getText(MainWindow, 'Select a Team', 'Enter name of team:')
        if ok:
            self.TeamName.setText(str(tname))
        self.batRadio.setEnabled(True)
        self.bowRadio.setEnabled(True)
        self.arRadio.setEnabled(True)
        self.wkRadio.setEnabled(True)

    # function to run when OPEN Team action is triggered    
    def onActionOpen(self):
        self.bat=0
        self.bow=0
        self.ar=0
        self.wk=0
        self.avail=1000
        self.used=0
        self.listWidget.clear()
        self.listWidget_2.clear()
        self.noOnApp()
        self.openteam()

    def openteam(self):
        record=db.execute("SELECT TName FROM teams")
        teams=[]
        for row in record:
            teams.append(row[0])
        team, ok = QtWidgets.QInputDialog.getItem(MainWindow, "Open a Team",
                "Choose a team", teams, 0, False)
        if ok and team:
            self.TeamName.setText(team)
        record=db.execute("SELECT Players, Value FROM teams WHERE TName='"+team+"'")
        row=record.fetchone()
        players=row[0].split(",")
        self.listWidget_2.addItems(players)
        self.used=row[1]
        self.avail=1000-row[1]

        for i in range(self.listWidget_2.count()):
            pname=self.listWidget_2.item(i).text()
            res=db.execute("SELECT Ctg FROM stats WHERE Player='"+pname+"'")
            row=res.fetchone()
            ctg=row[0]
            if ctg=='BAT':self.bat+=1
            if ctg=='BOW':self.bow+=1
            if ctg=='AR':self.ar+=1
            if ctg=='WK':self.wk+=1
        
        self.noOnApp()

    # function to run when SAVE Team action is triggered   
    def onActionSave(self):
        players=""
        l2count=self.listWidget_2.count()
        for i in range(l2count):
            players=players+self.listWidget_2.item(i).text()
            if i<l2count-1:
                players=players+","
        self.saveTeam(self.TeamName.text(),players,self.used)

    def saveTeam(self,name,plist,points):
        if (self.bat+self.bow+self.ar+self.wk)<11:
            self.popup("Players less than 11 not allowed!",QtWidgets.QMessageBox.Critical)
            return
        try:
            cur.execute("INSERT INTO teams(TName,Players,Value) VALUES('"+name+"','"+plist+"','"+str(points)+"');")
            db.commit()
            self.popup("Team saved successfully",QtWidgets.QMessageBox.NoIcon)
        except:
            self.popup("Something went wrong!",QtWidgets.QMessageBox.Critical)
            db.rollback()

    # function to run when NEW Team action is triggered
    # Dialog Box coding in 'evaluateteam.py' file
    def onActionEvaluate(self):
        from evaluateteam import Ui_Dialog_Evaluate as Form
        evaluateteam = QtWidgets.QDialog()
        evaluateteam.ui = Form()
        evaluateteam.ui.setupUiEvaluate(evaluateteam)
        evaluateteam.exec_()
        evaluateteam.show() 

    # function for displaying list of available players according
    # to players' categories when radio buttons are toggled
    def showList1(self,MainWindow):
        global records
        if (self.batRadio.isChecked()==True):
            cur.execute("SELECT * FROM stats WHERE Ctg='BAT';")
            records=cur.fetchall()
            self.listWidget.clear()
            for row in records:
                self.listWidget.addItem(row[0])
            self.listWidget.update()
        elif (self.bowRadio.isChecked()==True):
            cur.execute("SELECT * FROM stats WHERE Ctg='BOW';")
            records=cur.fetchall()
            self.listWidget.clear()
            for row in records:
                self.listWidget.addItem(row[0])
            self.listWidget.update()
        elif (self.arRadio.isChecked()==True):
            cur.execute("SELECT * FROM stats WHERE Ctg='AR';")
            records=cur.fetchall()
            self.listWidget.clear()
            for row in records:
                self.listWidget.addItem(row[0])
            self.listWidget.update()
        elif (self.wkRadio.isChecked()==True):
            cur.execute("SELECT * FROM stats WHERE Ctg='WK';")
            records=cur.fetchall()
            self.listWidget.clear()
            for row in records:
                self.listWidget.addItem(row[0])
            self.listWidget.update()

    # function for removing player from list1 and adding to list2
    # when an item in list1 is double clicked
    def removelist1(self, item):
        ctg=''
        if self.batRadio.isChecked()==True:ctg='BAT'
        if self.bowRadio.isChecked()==True:ctg='BOW'
        if self.arRadio.isChecked()==True:ctg='AR'
        if self.wkRadio.isChecked()==True:ctg='WK'
        ret=self.selection(ctg, item)
        if ret==True:                         
            self.listWidget.takeItem(self.listWidget.row(item))
            self.listWidget_2.addItem(item.text())
            self.noOnApp()

    # function for removing player from list1 and adding to list2
    # when an item in list1 is double clicked            
    def removelist2(self, item):
        self.listWidget_2.takeItem(self.listWidget_2.row(item))
        
        cur.execute("SELECT Player,Value,Ctg FROM stats WHERE Player='"+item.text()+"'")
        row=cur.fetchone()
        self.avail=self.avail+int(row[1])
        self.used=self.used-int(row[1])
        ctg=row[2]
        if ctg=="BAT":
            self.bat-=1
            if self.batRadio.isChecked()==True:self.listWidget.addItem(item.text())
        if ctg=="BWL":
            self.bow-=1
            if self.bowRadio.isChecked()==True:self.listWidget.addItem(item.text())
        if ctg=="AR":
            self.ar-=1
            if self.arRadio.isChecked()==True:self.listWidget.addItem(item.text())
        if ctg=="WK":
            self.wk-=1
            if self.wkRadio.isChecked()==True:self.listWidget.addItem(item.text())
        self.noOnApp()

    # function to maintain selection criteria of players
    def selection(self,ctg,item):
        msg=''
        msg1="Batsmen more than 5 not allowed!"
        msg2="Bowlers more than 5 not allowed!"
        msg3="Allrounders more than 3 not allowed!"
        msg4="Wicketkeepers more than 1 not allowed!"
        msg5='No more points available!'
        if ctg=="BAT" and self.bat>=5:msg=msg1
        elif ctg=="BOW" and self.bow>=5:msg=msg2
        elif ctg=="AR" and self.ar>=3:msg=msg3
        elif ctg=="WK" and self.wk>=1:msg=msg4
        elif msg!='' and self.avail<=0:
            msg = msg5
        if msg==msg1 or msg==msg2 or msg==msg3 or msg==msg4 or msg==msg5:
            self.popup(msg,QtWidgets.QMessageBox.Critical)
            return False

        if ctg=="BAT":self.bat+=1
        if ctg=="BOW":self.bow+=1
        if ctg=="AR":self.ar+=1
        if ctg=="WK":self.wk+=1
        cur.execute("SELECT Player,Value FROM stats where Player='"+item.text()+"'")
        row=cur.fetchone()
        self.avail=self.avail-int(row[1])
        self.used=self.used+int(row[1])
        return True

    # function to display various points and numbers on app screen
    def noOnApp(self):
        self.BMenNo.setText(str(self.bat))
        self.bowNo.setText(str(self.bow))
        self.ARNo.setText(str(self.ar))
        self.WKNo.setText(str(self.wk))
        self.PtAvNo.setText(str(self.avail))
        self.PtUsNo.setText(str(self.used))

    # popup dialog to show errors and messages
    def popup(self,msg,icon):
        new=QtWidgets.QMessageBox()
        new.setWindowTitle(" ")
        new.setText(msg)
        new.setIcon(icon)
        new.setStandardButtons(QtWidgets.QMessageBox.Ok)
        x = new.exec()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
